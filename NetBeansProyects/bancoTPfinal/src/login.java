
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class login extends javax.swing.JFrame {

    DefaultTableModel usuarios = new DefaultTableModel();
    
    //definimos dos valores como falsos para validar luego
    boolean contieneU = false;
  
    String usuarioin = "";
    String clavein = "";
    
    //validado el usuario, tomamos la clave que esperamos
    String claveL = "";
    //dos claves que se van a pasar al resto
    String codigoL = "";
    String nivelL = "";
    
    
    public login() {
        initComponents();
        this.setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lb_usuario = new javax.swing.JLabel();
        input_usuario = new javax.swing.JTextField();
        lb_clave = new javax.swing.JLabel();
        input_clave = new javax.swing.JTextField();
        b_valida = new javax.swing.JButton();
        b_cerrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Login"));

        lb_usuario.setText("Usuario:");

        input_usuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_usuarioActionPerformed(evt);
            }
        });
        input_usuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                input_usuarioKeyTyped(evt);
            }
        });

        lb_clave.setText("Clave:");

        input_clave.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                input_claveKeyTyped(evt);
            }
        });

        b_valida.setText("Validar Usuarrio");
        b_valida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_validaActionPerformed(evt);
            }
        });

        b_cerrar.setText("Cerrar");
        b_cerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_clave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(input_usuario)
                    .addComponent(input_clave, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(b_cerrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_valida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lb_usuario)
                            .addComponent(input_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(lb_clave)
                                .addGap(13, 13, 13))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(input_clave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(b_valida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(b_cerrar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_validaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_validaActionPerformed
        //cargamos las variables con los valores ingresados y ejecutamos metodo
        usuarioin = this.input_usuario.getText();
        clavein = this.input_clave.getText();
        this.validausuariosql();
    }//GEN-LAST:event_b_validaActionPerformed

    private void b_cerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cerrarActionPerformed
      System.exit(0);   
    }//GEN-LAST:event_b_cerrarActionPerformed

    private void input_claveKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_input_claveKeyTyped
      int key = evt.getKeyChar();
        boolean numeros = key>=48 && key <=57;
       
        if (!numeros){
         evt.consume();
        
        }            
        if (input_clave.getText().length()>=5){
       evt.consume();
      
       }   // TODO add your handling code here:
    }//GEN-LAST:event_input_claveKeyTyped

    private void input_usuarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_input_usuarioKeyTyped
    int key = evt.getKeyChar();
        boolean min = key >=97 && key <=122;
        boolean espacio = key ==32;
        boolean may = key >=65 && key <=90;
     
        if (!(min || espacio|| may)){
        evt.consume();
        }

        if (input_usuario.getText().length()>=8){
        evt.consume();
        
        }
    }//GEN-LAST:event_input_usuarioKeyTyped

    private void input_usuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input_usuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_input_usuarioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new login().setVisible(true);
            }
        });
    }

    
    private void validausuariosql(){
        
         try{
         // conectar a la base de datos
           Connection conexion = DriverManager.getConnection("jdbc:mysql://localhost/banco", "root", "");
           // Enviando la sentencia sql
           PreparedStatement sq = conexion.prepareStatement("SELECT * FROM usuarios WHERE usuario_nombre = ?");
           //Especifico los campos 
           sq.setString(1, input_usuario.getText().trim());
           ResultSet rs = sq.executeQuery();
           
           
           if (rs.next()){
                JOptionPane.showMessageDialog(null, "Bienvenido "+usuarioin+ "!");
               
                PreparedStatement sq2 = conexion.prepareStatement("SELECT * FROM usuarios WHERE clave = ?");
                sq2.setString(1, input_clave.getText().trim());
                ResultSet rs2 = sq2.executeQuery();
                if (rs2.next()){
                JOptionPane.showMessageDialog(null, "La clave ingresada es correcta"); 
                //cargamos las variables para la sesion
                codigoL = rs.getString("id");
                nivelL = rs.getString("acceso");
              
                //pasamos dos variables al main
                         sesion pdi = new sesion(codigoL, nivelL);
                         main  se = new main(pdi);
                         se.setVisible(true);
                         this.setVisible(false);
                
                } else {
                 JOptionPane.showMessageDialog(null, "La clave ingresada no es correcta"); 
                 input_clave.setText("");
                }
                
           } else {
               JOptionPane.showMessageDialog(null, "El usuario no existe");
               input_usuario.setText("");
           }
           
         }catch(SQLException e){
       
       }
    }
    
    private void validausuario(){
    
        Scanner entrada = null;
        String linea;
        
        Scanner sc = new Scanner(System.in);
        //inicializamos el numero de linea
        int numeroDeLinea = 1;
        
       try {
           FileReader archivo = new FileReader(".\\src\\dbs\\usuarios.txt");
           BufferedReader leer = new BufferedReader(archivo);
           entrada = new Scanner(archivo);
           
           while (entrada.hasNext()) { //mientras no se llegue al final del fichero
                linea = entrada.nextLine();  //se lee una línea
                //si esta el usuario en la linea que lee...
                if (linea.contains(usuarioin)) {   
                    //deshabilitamos input usuario
                    this.input_usuario.setEnabled(false);
                    //seleccionamos el valor / clave que vamos a validar
                    claveL = linea.substring(0, 5);
                    
                    codigoL = linea.substring(8, 11);
                    nivelL = linea.substring(6, 7);
                    
    
                    //validamos la clave ingresada
                        if (clavein.equals(claveL)){
                         JOptionPane.showMessageDialog(null, 
                                 "Usuario validado", "Atencion!", 
                                 HEIGHT); 
                         this.setVisible(false); 
                         //pasamos dos variables al main
                         sesion pdi = new sesion(codigoL, nivelL);
                         main  se = new main(pdi);
                         se.setVisible(true);
                        } else {
                         JOptionPane.showMessageDialog(null, 
                                 "La clave no es correcta", "Atencion!", 
                                 HEIGHT);
                         this.input_clave.setText("");
                        }
                    contieneU = true;
                    
                }
                numeroDeLinea++; //se incrementa el contador de líneas
                }
                //si el archivo no contienen el usuario...
                if(!contieneU){
                JOptionPane.showMessageDialog(null, 
                        "Usuario no registrado", "Atencion!", 
                        HEIGHT);
                this.input_usuario.setText("");
                this.input_clave.setText("");
            }
           
           
           
       }catch(FileNotFoundException e){
           System.out.println(e);
       
       }
      }    
        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_cerrar;
    private javax.swing.JButton b_valida;
    private javax.swing.JTextField input_clave;
    private javax.swing.JTextField input_usuario;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lb_clave;
    private javax.swing.JLabel lb_usuario;
    // End of variables declaration//GEN-END:variables

    private String setText(String string) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
